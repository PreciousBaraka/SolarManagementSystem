generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  MANAGER
  INSTALLER
  INVENTORY_OFFICER
  CUSTOMER
  SALES_PERSON
  SUPPLIER
}

enum installationStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum UsageType {
  SALE
  INSTALLATION
}

model User {
  id          String   @id @default(uuid())
  fullName    String
  email       String   @unique
  password    String
  phoneNumber String
  userType    UserType @default(CUSTOMER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  stockOuts        StockOut[]
  installations    InstallationSite[]
  purchases        Sales[] // As customer
  sales            Sales[]            @relation("SalesPerson") // As salesperson
  suppliedStock    StockIn[]          @relation("SupplierStockIn")
  suppliedProducts Product[]          @relation("SupplierProduct")

  @@index([id])
  @@map("users")
}

model Product {
  id         String   @id @default(uuid())
  name       String
  categoryId String
  supplierId String?
  unit       String
  unitPrice  Float
  quantity   Int      @default(0)
  createdAt  DateTime @default(now())

  stockIn       StockIn[]
  stockOut      StockOut[]
  installations InstallationSite[]
  category      Category           @relation(fields: [categoryId], references: [id])
  supplier      User?              @relation("SupplierProduct", fields: [supplierId], references: [id])
  productSales  SalesProduct[]

  @@index([id])
  @@map("products")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  products  Product[]

  @@index([id])
  @@map("categories")
}

model StockIn {
  id         String   @id @default(uuid())
  productId  String
  supplierId String
  quantity   Int
  dateIn     DateTime @default(now())
  salesId    String? // Optional: link to sale (purchase)

  product  Product @relation(fields: [productId], references: [id])
  supplier User    @relation("SupplierStockIn", fields: [supplierId], references: [id])
  sales    Sales?  @relation(fields: [salesId], references: [id])

  @@index([id])
  @@map("stock_in")
}

model StockOut {
  id          String    @id @default(uuid())
  productId   String
  quantity    Int
  price       Float
  usageType   UsageType @default(SALE)
  destination String?
  dateOut     DateTime  @default(now())
  installerId String?
  salesId     String? // Link to sale

  installer User?   @relation(fields: [installerId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  sales     Sales?  @relation(fields: [salesId], references: [id])

  @@index([id])
  @@map("stock_out")
}

model InstallationSite {
  id            String             @id @default(uuid())
  location      String
  productId     String
  quantity      Int
  customerId    String
  status        installationStatus @default(PENDING)
  dateInstalled DateTime           @default(now())

  product  Product @relation(fields: [productId], references: [id])
  customer User    @relation(fields: [customerId], references: [id])

  @@index([id])
  @@map("installation_sites")
}

model Sales {
  id                  String   @id @default(uuid())
  customerId          String?
  customerName        String?
  customerPhoneNumber String?
  salesPersonId       String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  salesProducts SalesProduct[]
  stockOuts     StockOut[]
  stockIns      StockIn[] // optional, for stock received from suppliers
  customer      User?          @relation(fields: [customerId], references: [id])
  salesPerson   User           @relation("SalesPerson", fields: [salesPersonId], references: [id])

  @@index([id])
  @@map("sales")
}

model SalesProduct {
  id         String @id @default(uuid())
  salesId    String
  productId  String
  quantity   Int
  price      Float
  totalPrice Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sales   Sales   @relation(fields: [salesId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([id])
  @@map("sales_products")
}
